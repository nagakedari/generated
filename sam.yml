AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: For Student lambda
Resources:
  StudentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: ./dist/api.zip
      Runtime: nodejs8.10
      Role: !GetAtt StudentLambdaExecutionRole.Arn
      Events:
        CollectionApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestAPI
            Method: any
            Path: /students
        ItemApi:
          Type: Api
          Properties:
            RestApiId: !Ref RestAPI
            Method: any
            Path: /students/{id}
      Environment:
        Variables:
          MongoUser: "{{resolve:ssm:mongo_user:1}}"
          # MongoPwd: '{{resolve:ssm-secure:mongo_password}}'
          MongoCluster: 'cluster0-knpmq.mongodb.net'
          MongoDBName: 'boilerplate'
  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    Properties:
      Name: !Sub '${AWS::StackName}-apiKey'
      Description: 'StudentApiKey'
      Enabled: true
      GenerateDistinctId: false
  ApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - RestAPIdevStage
    Properties:
      ApiStages:
      - ApiId: !Ref RestAPI
        Stage: dev 
      UsagePlanName: !Sub '${AWS::StackName}-apiUsagePlan'
  ApiUsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan
  RestAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: dev
      DefinitionBody:
        swagger: '2.0'
        info:
          title: !Sub '${AWS::StackName}-StudentAPI'
        basePath: /
        schemes:
          - https
        paths:
          /students:
            get:
              response: {}
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StudentFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /students/{id}:
            get:
              response: {}
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StudentFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
        securityDefinitions: 
         api_key: 
          type: apiKey
          name: x-api-key
          in: header
  StudentLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
  # SSMParametersRolePolicy:
  #   Type: AWS::IAM::Policy
  #   Properties:
  #     PolicyName: SSMReadOnlyPolicy
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Action:
  #         - ssm:GetParameter
  #         Resource: '*'
  #     Roles:
  #     - !Ref StudentLambdaExecutionRole